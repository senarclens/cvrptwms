###########################################################################
# configuration file for VRPTWMS
# author: Gerald Senarclens de Grancy
###########################################################################

## the max. running time per instance in seconds and the max. number of
## solutions per instance
## whichever is hit first will stop the metaheuristic
## only relevant when using metaheuristics
## set runtime to 0 for infinite
#runtime = 3600
#runtime = 900
runtime = 10
## Maximum number of iterations for metaheuristics.
## set max_iterations to 0 for infinite
## For ACO and GRASP, an iteration is equivalent to a solution. Running ACO,
## the actual number of iterations will be rounded up to the closest multiple
## of 'ants'. For TS, an iteration is represented by applying a local
## search operator.
max_iterations = 0

## default metaheuristic
## can be 'none', 'aco' (ant colony optimization), 'cached_aco',
## 'grasp' or 'ts' (tabu search)
metaheuristic = cached_aco

## maximum number of workers per vehicle
max_workers = 3

## objective function: settings for cost parameters
## note: the objective function always remains hierarchical
cost_truck = 1
cost_worker = 0.1
cost_distance = 0.0001

## how many times should the algorithm try to reduce a cost factor
## without success before attempting the next cost factor
## this is only relevant for certain construction heuristics (eg. parallel ACO)
## eg: attemps = 50 means that the algorithm will try 50 times to find a
## feasible solution with an improved truck number before giving up
## and focusing on the number of workers
max_failed_attempts = 500

## perform the adaption of the service times used by Reimann et al. 2011
adapt_service_times = true
service_rate = 2.0
truck_velocity = 1.0


###########################################################################
## route construction
###########################################################################
## default route construction (start) heuristic
## can be 'solomon', 'solomon-mr' or 'parallel'
start_heuristic = solomon
## default for Solomon's I1 parameter alpha; 0.0 <= alpha <= 1.0;
alpha = 1.0
## default for Solomon's I1 parameter lambda; lambda >= 0.0, but should
## generally be 2.0
lambda = 2.0
## default for Solomon's I1 parameter mu; mu >= 0.0, but should generally be 1.0
mu = 1.0
## use a deterministic version of Solomon's I1 (always use the best insertion)
## if set to false, a weighted attractivity (1/insertion cost) is used
## setting deterministic to true implies disabling all metaheuristics
deterministic = false


###########################################################################
## ACO
###########################################################################
## number of ants (number of concurrent solutions for each update of the
## pheromone matrix)
## if set to 0, ants is set dynamically to the number of customers in a problem
ants = 0
## pheromone persistance (= 1 - evaporation)
## 0.95 means: use 95% of the old values; 5% are taken from the best solultion
rho = 0.985
## min pheromone is the minimum amount of pheromone between two nodes
## this is necessary b/c of the definition of the trail which is, for
## inserting node k between i and j: (\tau_{ik} + \tau_{kj}) / (2 * \tau_{ij})
## and could lead to a zero division or too big trail values
min_pheromone = 0.0000000000001
## value to initialize pheromone matrix
initial_pheromone = 1.0


###########################################################################
## GRASP
###########################################################################
## weight the insertion alternatives by their attractivity (a function of the
## insertion cost)
use_weights = true
## size of the restricted candidate list (RCL)
## use 0 to allow the RCL to contain all nodes in any given problem
rcl_size = 2


###########################################################################
## TS
###########################################################################
## size of the tabu list (number of iterations a move remains blocked)
tabutime = 50


###########################################################################
## output
###########################################################################
## higher integers enable more verbose output
# 0: little output
# 1: print solution details etc
# 2: print some debugging details
# 3: print full debugging details
verbosity = 0

## default output format
# 'human' for human readable
# 'csv' for comma separated values
format = human

# adjust output format if the program is run with GNU parallel
# any repetitive output is suppressed and the solution is presented in
# its most terse form; setting this to true implies `format = csv`
parallel = false


###########################################################################
## local search
###########################################################################
## enable local search
do_ls = true
## only move 1 and move 2 are supported
max_move = 2
## set best_moves to true if only the best moves should be performed during
## each iteration; otherwise, the every encountered improving move is executed
best_moves = true
## only swap 1 is currently supported
max_swap = 1
## TODO: implement distance optimization
max_optimize = 3


###########################################################################
## output files
###########################################################################
## the stats file contains statistics of operator usage etc
## it will only be created if the build was made with stats enabled
## this file will be replaced if it existed before the run
stats_filename = "stats.txt"
## solutions details are appended to `sol_details_filename` in order
## to pass them on to people interested if that solution really exists
sol_details_filename = "details_testing.txt"
